---
title: "Neural Networks"
subtitle: "Machine learning models"
---

# Neural Networks

Neural networks are machine learning models that can learn complex patterns in your data for classification and regression tasks.

## Types of Tasks

### Classification
Predict categories or classes.

**Example**: Spam vs. not spam, flower species identification.

### Regression
Predict continuous values.

**Example**: House prices, stock prices, temperature forecasting.

## Data Requirements

### Input Data

- **Numeric features**: All input variables must be numeric
- **Clean data**: Remove or handle missing values
- **Sufficient samples**: More data generally leads to better performance

### Target Variable

- **Classification**: Categorical variable (2+ classes)
- **Regression**: Continuous numeric variable

## How to Run

### Step 1: Select Neural Network
1. Choose "Neural Network" from the test dropdown
2. Select your CSV file

### Step 2: Configure the Model
1. **Task Type**: Choose Classification or Regression
2. **Dependent Variable**: Select your target variable
3. **Independent Variables**: Select one or more feature variables
4. **Hyperparameters** (optional):
   - **Hidden Layer Size**: Number of neurons (default: 10)
   - **Learning Rate**: Step size for training (default: 0.01)
   - **Epochs**: Training iterations (default: 1000)

### Step 3: Run Analysis
Click "Run Analysis" to train your neural network.

## Interpreting Results

### Model Information

- **Architecture**: Input → Hidden → Output layer sizes
- **Task Type**: Classification or Regression
- **Hyperparameters**: Training configuration used

### Performance Metrics

**For Classification:**

- **Accuracy**: Percentage of correct predictions
- **Number of Classes**: Total categories in your data

**For Regression:**

- **MSE (Mean Squared Error)**: Average squared prediction error
- **RMSE (Root Mean Squared Error)**: Square root of MSE
- **MAE (Mean Absolute Error)**: Average absolute prediction error
- **R²**: Proportion of variance explained by the model

### Training Progress

- **Training Loss**: Error on training data
- **Validation Loss**: Error on validation data
- **Convergence**: Whether the model stopped improving

## Model Download

### Download Options

1. **Model File (.pkl)**: Complete trained neural network
2. **Model Info (.json)**: Architecture and performance details
3. **Python Script**: Ready-to-use code for deployment

### Using Downloaded Models
```python
import numpy as np
import pickle
import base64

# Load your model
model = SimpleNeuralNetwork(input_size, hidden_size, output_size)
model.load_model(model_base64)

# Preprocess new data
normalized_data = preprocess_data(new_data, X_mean, X_std)

# Make predictions
predictions = model.predict(normalized_data)
```

## Best Practices

### Data Preparation

- **Clean your data**: Remove missing values and outliers
- **Feature selection**: Choose relevant variables
- **Data splitting**: Ensure sufficient training data

### Model Configuration

- **Start simple**: Use default hyperparameters first
- **Experiment**: Try different hidden layer sizes
- **Monitor training**: Watch for overfitting

## Limitations

### Current Implementation

- **Single hidden layer**: Limited to one hidden layer
- **Fixed architecture**: Cannot add custom layers
- **Basic optimization**: Uses simple gradient descent

### General Limitations

- **Black-box nature**: Difficult to interpret decisions
- **Data requirements**: Need sufficient training data
- **Computational cost**: Training can be time-consuming
- **Overfitting risk**: Can memorize training data

## Export Options

- **LaTeX**: Publication-ready tables
- **CSV**: Structured data format
- **Model files**: Complete models for deployment

---

*Need help? Check the [FAQ](../help/faq.qmd) or [contact support](https://statisticskit.com).* 